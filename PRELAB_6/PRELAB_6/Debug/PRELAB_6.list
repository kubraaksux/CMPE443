
PRELAB_6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000220  080001f0  080001f0  000101f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000410  08000418  00010418  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000410  08000410  00010418  2**0
                  CONTENTS
  4 .ARM          00000000  08000410  08000410  00010418  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000410  08000418  00010418  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000410  08000410  00010410  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000414  08000414  00010414  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010418  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000000  08000418  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000020  08000418  00020020  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  00010418  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000317  00000000  00000000  0001044e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000000c7  00000000  00000000  00010765  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000048  00000000  00000000  00010830  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000030  00000000  00000000  00010878  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00000f52  00000000  00000000  000108a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000004cc  00000000  00000000  000117fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00003c78  00000000  00000000  00011cc6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0001593e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000054  00000000  00000000  00015990  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f0 <__do_global_dtors_aux>:
 80001f0:	b510      	push	{r4, lr}
 80001f2:	4c05      	ldr	r4, [pc, #20]	; (8000208 <__do_global_dtors_aux+0x18>)
 80001f4:	7823      	ldrb	r3, [r4, #0]
 80001f6:	b933      	cbnz	r3, 8000206 <__do_global_dtors_aux+0x16>
 80001f8:	4b04      	ldr	r3, [pc, #16]	; (800020c <__do_global_dtors_aux+0x1c>)
 80001fa:	b113      	cbz	r3, 8000202 <__do_global_dtors_aux+0x12>
 80001fc:	4804      	ldr	r0, [pc, #16]	; (8000210 <__do_global_dtors_aux+0x20>)
 80001fe:	e000      	b.n	8000202 <__do_global_dtors_aux+0x12>
 8000200:	bf00      	nop
 8000202:	2301      	movs	r3, #1
 8000204:	7023      	strb	r3, [r4, #0]
 8000206:	bd10      	pop	{r4, pc}
 8000208:	20000000 	.word	0x20000000
 800020c:	00000000 	.word	0x00000000
 8000210:	080003f8 	.word	0x080003f8

08000214 <frame_dummy>:
 8000214:	b508      	push	{r3, lr}
 8000216:	4b03      	ldr	r3, [pc, #12]	; (8000224 <frame_dummy+0x10>)
 8000218:	b11b      	cbz	r3, 8000222 <frame_dummy+0xe>
 800021a:	4903      	ldr	r1, [pc, #12]	; (8000228 <frame_dummy+0x14>)
 800021c:	4803      	ldr	r0, [pc, #12]	; (800022c <frame_dummy+0x18>)
 800021e:	e000      	b.n	8000222 <frame_dummy+0xe>
 8000220:	bf00      	nop
 8000222:	bd08      	pop	{r3, pc}
 8000224:	00000000 	.word	0x00000000
 8000228:	20000004 	.word	0x20000004
 800022c:	080003f8 	.word	0x080003f8

08000230 <main>:
#define GPIOA			((GPIO_TypeDef *)	0x42020000) // GPIOA okay
#define TIM6           ((TIM_TypeDef *)	 0x40001000)  // TIM6 peripheral base adress
uint32_t timer_value = 0;
uint32_t timer_end_value = 0;

int main(void) {
 8000230:	b480      	push	{r7}
 8000232:	af00      	add	r7, sp, #0
	RCC_AHB2ENR |= 1 << 0; // gpioa clock enabled
 8000234:	4b44      	ldr	r3, [pc, #272]	; (8000348 <main+0x118>)
 8000236:	681b      	ldr	r3, [r3, #0]
 8000238:	4a43      	ldr	r2, [pc, #268]	; (8000348 <main+0x118>)
 800023a:	f043 0301 	orr.w	r3, r3, #1
 800023e:	6013      	str	r3, [r2, #0]

	GPIOA->MODER &= ~(0x03 << (9 * 2));  // red led pa9 . pa9 output.
 8000240:	4b42      	ldr	r3, [pc, #264]	; (800034c <main+0x11c>)
 8000242:	681b      	ldr	r3, [r3, #0]
 8000244:	4a41      	ldr	r2, [pc, #260]	; (800034c <main+0x11c>)
 8000246:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 800024a:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (0x01 << (9 * 2));  // output 01
 800024c:	4b3f      	ldr	r3, [pc, #252]	; (800034c <main+0x11c>)
 800024e:	681b      	ldr	r3, [r3, #0]
 8000250:	4a3e      	ldr	r2, [pc, #248]	; (800034c <main+0x11c>)
 8000252:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000256:	6013      	str	r3, [r2, #0]

	// echo'yu bağlamak için bir pin seç. input yap.

	GPIOA->MODER &= ~(0x03 << (0 * 2)); // pa0 input
 8000258:	4b3c      	ldr	r3, [pc, #240]	; (800034c <main+0x11c>)
 800025a:	681b      	ldr	r3, [r3, #0]
 800025c:	4a3b      	ldr	r2, [pc, #236]	; (800034c <main+0x11c>)
 800025e:	f023 0303 	bic.w	r3, r3, #3
 8000262:	6013      	str	r3, [r2, #0]


	// trigger'ı bağlamak için bir pin seç. output yap.

	GPIOA->MODER &= ~(0x03 << (1 * 2));  // pa1 output
 8000264:	4b39      	ldr	r3, [pc, #228]	; (800034c <main+0x11c>)
 8000266:	681b      	ldr	r3, [r3, #0]
 8000268:	4a38      	ldr	r2, [pc, #224]	; (800034c <main+0x11c>)
 800026a:	f023 030c 	bic.w	r3, r3, #12
 800026e:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (0x01 << (1 * 2));
 8000270:	4b36      	ldr	r3, [pc, #216]	; (800034c <main+0x11c>)
 8000272:	681b      	ldr	r3, [r3, #0]
 8000274:	4a35      	ldr	r2, [pc, #212]	; (800034c <main+0x11c>)
 8000276:	f043 0304 	orr.w	r3, r3, #4
 800027a:	6013      	str	r3, [r2, #0]



	RCC_APB1ENR |= (1 << 4); // enable tim6
 800027c:	4b34      	ldr	r3, [pc, #208]	; (8000350 <main+0x120>)
 800027e:	681b      	ldr	r3, [r3, #0]
 8000280:	4a33      	ldr	r2, [pc, #204]	; (8000350 <main+0x120>)
 8000282:	f043 0310 	orr.w	r3, r3, #16
 8000286:	6013      	str	r3, [r2, #0]

	TIM6->PSC = 4 - 1; // tim6 ya 4MHz sinyal geliyor. bu registera verdiğin. 4MHz/değer
 8000288:	4b32      	ldr	r3, [pc, #200]	; (8000354 <main+0x124>)
 800028a:	2203      	movs	r2, #3
 800028c:	629a      	str	r2, [r3, #40]	; 0x28
	TIM6->CR1 |= (0x01); // okay. timer'ın saymasını başlatıyor.
 800028e:	4b31      	ldr	r3, [pc, #196]	; (8000354 <main+0x124>)
 8000290:	681b      	ldr	r3, [r3, #0]
 8000292:	4a30      	ldr	r2, [pc, #192]	; (8000354 <main+0x124>)
 8000294:	f043 0301 	orr.w	r3, r3, #1
 8000298:	6013      	str	r3, [r2, #0]


	while(1) {

		TIM6->SR &= ~(1<<0); // // sr  0.bit 0
 800029a:	4b2e      	ldr	r3, [pc, #184]	; (8000354 <main+0x124>)
 800029c:	691b      	ldr	r3, [r3, #16]
 800029e:	4a2d      	ldr	r2, [pc, #180]	; (8000354 <main+0x124>)
 80002a0:	f023 0301 	bic.w	r3, r3, #1
 80002a4:	6113      	str	r3, [r2, #16]
		// trigger başlat. triggger output 1 ver

		GPIOA->ODR |= (1<<1);
 80002a6:	4b29      	ldr	r3, [pc, #164]	; (800034c <main+0x11c>)
 80002a8:	695b      	ldr	r3, [r3, #20]
 80002aa:	4a28      	ldr	r2, [pc, #160]	; (800034c <main+0x11c>)
 80002ac:	f043 0302 	orr.w	r3, r3, #2
 80002b0:	6153      	str	r3, [r2, #20]

		//  arr yi 2^16-1 (??)

		TIM6->ARR = 10;
 80002b2:	4b28      	ldr	r3, [pc, #160]	; (8000354 <main+0x124>)
 80002b4:	220a      	movs	r2, #10
 80002b6:	62da      	str	r2, [r3, #44]	; 0x2c

		while(!(TIM6->SR & 1));
 80002b8:	bf00      	nop
 80002ba:	4b26      	ldr	r3, [pc, #152]	; (8000354 <main+0x124>)
 80002bc:	691b      	ldr	r3, [r3, #16]
 80002be:	f003 0301 	and.w	r3, r3, #1
 80002c2:	2b00      	cmp	r3, #0
 80002c4:	d0f9      	beq.n	80002ba <main+0x8a>
		// sr nin 0.biti 1 olana kadar bekle. yani overflow olana kadar bekle

		// trigger ı 0 la
		GPIOA->ODR &= ~(1<<1);
 80002c6:	4b21      	ldr	r3, [pc, #132]	; (800034c <main+0x11c>)
 80002c8:	695b      	ldr	r3, [r3, #20]
 80002ca:	4a20      	ldr	r2, [pc, #128]	; (800034c <main+0x11c>)
 80002cc:	f023 0302 	bic.w	r3, r3, #2
 80002d0:	6153      	str	r3, [r2, #20]

		//echo 0 ken bekle
		while(!( GPIOA->IDR & 1));
 80002d2:	bf00      	nop
 80002d4:	4b1d      	ldr	r3, [pc, #116]	; (800034c <main+0x11c>)
 80002d6:	691b      	ldr	r3, [r3, #16]
 80002d8:	f003 0301 	and.w	r3, r3, #1
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d0f9      	beq.n	80002d4 <main+0xa4>
		// start time
		TIM6->ARR = 0xFFFF;  // (?)
 80002e0:	4b1c      	ldr	r3, [pc, #112]	; (8000354 <main+0x124>)
 80002e2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80002e6:	62da      	str	r2, [r3, #44]	; 0x2c
		timer_value = TIM6->CNT;
 80002e8:	4b1a      	ldr	r3, [pc, #104]	; (8000354 <main+0x124>)
 80002ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80002ec:	4a1a      	ldr	r2, [pc, #104]	; (8000358 <main+0x128>)
 80002ee:	6013      	str	r3, [r2, #0]
		// echo 1 ken bekle
		while( GPIOA->IDR & 1);
 80002f0:	bf00      	nop
 80002f2:	4b16      	ldr	r3, [pc, #88]	; (800034c <main+0x11c>)
 80002f4:	691b      	ldr	r3, [r3, #16]
 80002f6:	f003 0301 	and.w	r3, r3, #1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d1f9      	bne.n	80002f2 <main+0xc2>
		// end time
		// start ile end arasındaki fark bir ses dalgasının 10 cm yi gidip dönme süresinden azsa red ledi yak. çoksa red ledi söndür.

		if(TIM6->CNT - timer_value < 583){
 80002fe:	4b15      	ldr	r3, [pc, #84]	; (8000354 <main+0x124>)
 8000300:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000302:	4b15      	ldr	r3, [pc, #84]	; (8000358 <main+0x128>)
 8000304:	681b      	ldr	r3, [r3, #0]
 8000306:	1ad3      	subs	r3, r2, r3
 8000308:	f240 2246 	movw	r2, #582	; 0x246
 800030c:	4293      	cmp	r3, r2
 800030e:	d806      	bhi.n	800031e <main+0xee>
		GPIOA->ODR |= 1<<9;
 8000310:	4b0e      	ldr	r3, [pc, #56]	; (800034c <main+0x11c>)
 8000312:	695b      	ldr	r3, [r3, #20]
 8000314:	4a0d      	ldr	r2, [pc, #52]	; (800034c <main+0x11c>)
 8000316:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800031a:	6153      	str	r3, [r2, #20]
 800031c:	e005      	b.n	800032a <main+0xfa>
		}else{
			GPIOA->ODR &= ~(1<<9);
 800031e:	4b0b      	ldr	r3, [pc, #44]	; (800034c <main+0x11c>)
 8000320:	695b      	ldr	r3, [r3, #20]
 8000322:	4a0a      	ldr	r2, [pc, #40]	; (800034c <main+0x11c>)
 8000324:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000328:	6153      	str	r3, [r2, #20]
		}

		//delay
		timer_value = TIM6->CNT;
 800032a:	4b0a      	ldr	r3, [pc, #40]	; (8000354 <main+0x124>)
 800032c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800032e:	4a0a      	ldr	r2, [pc, #40]	; (8000358 <main+0x128>)
 8000330:	6013      	str	r3, [r2, #0]
		while(TIM6->CNT - timer_value < 0XFFFF);
 8000332:	bf00      	nop
 8000334:	4b07      	ldr	r3, [pc, #28]	; (8000354 <main+0x124>)
 8000336:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000338:	4b07      	ldr	r3, [pc, #28]	; (8000358 <main+0x128>)
 800033a:	681b      	ldr	r3, [r3, #0]
 800033c:	1ad3      	subs	r3, r2, r3
 800033e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8000342:	4293      	cmp	r3, r2
 8000344:	d9f6      	bls.n	8000334 <main+0x104>
		TIM6->SR &= ~(1<<0); // // sr  0.bit 0
 8000346:	e7a8      	b.n	800029a <main+0x6a>
 8000348:	4002104c 	.word	0x4002104c
 800034c:	42020000 	.word	0x42020000
 8000350:	40021058 	.word	0x40021058
 8000354:	40001000 	.word	0x40001000
 8000358:	2000001c 	.word	0x2000001c

0800035c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800035c:	480d      	ldr	r0, [pc, #52]	; (8000394 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800035e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000360:	e000      	b.n	8000364 <Reset_Handler+0x8>
 8000362:	bf00      	nop

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000364:	480c      	ldr	r0, [pc, #48]	; (8000398 <LoopForever+0x6>)
  ldr r1, =_edata
 8000366:	490d      	ldr	r1, [pc, #52]	; (800039c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000368:	4a0d      	ldr	r2, [pc, #52]	; (80003a0 <LoopForever+0xe>)
  movs r3, #0
 800036a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800036c:	e002      	b.n	8000374 <LoopCopyDataInit>

0800036e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800036e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000370:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000372:	3304      	adds	r3, #4

08000374 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000374:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000376:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000378:	d3f9      	bcc.n	800036e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800037a:	4a0a      	ldr	r2, [pc, #40]	; (80003a4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800037c:	4c0a      	ldr	r4, [pc, #40]	; (80003a8 <LoopForever+0x16>)
  movs r3, #0
 800037e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000380:	e001      	b.n	8000386 <LoopFillZerobss>

08000382 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000382:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000384:	3204      	adds	r2, #4

08000386 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000386:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000388:	d3fb      	bcc.n	8000382 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800038a:	f000 f811 	bl	80003b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800038e:	f7ff ff4f 	bl	8000230 <main>

08000392 <LoopForever>:

LoopForever:
    b LoopForever
 8000392:	e7fe      	b.n	8000392 <LoopForever>
  ldr   r0, =_estack
 8000394:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000398:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800039c:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80003a0:	08000418 	.word	0x08000418
  ldr r2, =_sbss
 80003a4:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80003a8:	20000020 	.word	0x20000020

080003ac <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80003ac:	e7fe      	b.n	80003ac <ADC1_2_IRQHandler>
	...

080003b0 <__libc_init_array>:
 80003b0:	b570      	push	{r4, r5, r6, lr}
 80003b2:	4d0d      	ldr	r5, [pc, #52]	; (80003e8 <__libc_init_array+0x38>)
 80003b4:	2600      	movs	r6, #0
 80003b6:	4c0d      	ldr	r4, [pc, #52]	; (80003ec <__libc_init_array+0x3c>)
 80003b8:	1b64      	subs	r4, r4, r5
 80003ba:	10a4      	asrs	r4, r4, #2
 80003bc:	42a6      	cmp	r6, r4
 80003be:	d109      	bne.n	80003d4 <__libc_init_array+0x24>
 80003c0:	4d0b      	ldr	r5, [pc, #44]	; (80003f0 <__libc_init_array+0x40>)
 80003c2:	2600      	movs	r6, #0
 80003c4:	4c0b      	ldr	r4, [pc, #44]	; (80003f4 <__libc_init_array+0x44>)
 80003c6:	f000 f817 	bl	80003f8 <_init>
 80003ca:	1b64      	subs	r4, r4, r5
 80003cc:	10a4      	asrs	r4, r4, #2
 80003ce:	42a6      	cmp	r6, r4
 80003d0:	d105      	bne.n	80003de <__libc_init_array+0x2e>
 80003d2:	bd70      	pop	{r4, r5, r6, pc}
 80003d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80003d8:	3601      	adds	r6, #1
 80003da:	4798      	blx	r3
 80003dc:	e7ee      	b.n	80003bc <__libc_init_array+0xc>
 80003de:	f855 3b04 	ldr.w	r3, [r5], #4
 80003e2:	3601      	adds	r6, #1
 80003e4:	4798      	blx	r3
 80003e6:	e7f2      	b.n	80003ce <__libc_init_array+0x1e>
 80003e8:	08000410 	.word	0x08000410
 80003ec:	08000410 	.word	0x08000410
 80003f0:	08000410 	.word	0x08000410
 80003f4:	08000414 	.word	0x08000414

080003f8 <_init>:
 80003f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003fa:	bf00      	nop
 80003fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003fe:	bc08      	pop	{r3}
 8000400:	469e      	mov	lr, r3
 8000402:	4770      	bx	lr

08000404 <_fini>:
 8000404:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000406:	bf00      	nop
 8000408:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800040a:	bc08      	pop	{r3}
 800040c:	469e      	mov	lr, r3
 800040e:	4770      	bx	lr
