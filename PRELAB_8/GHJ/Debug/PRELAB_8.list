
PRELAB_8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000348  080001f0  080001f0  000101f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000538  08000540  00010540  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000538  08000538  00010540  2**0
                  CONTENTS
  4 .ARM          00000000  08000538  08000538  00010540  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000538  08000540  00010540  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000538  08000538  00010538  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800053c  0800053c  0001053c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010540  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000024  20000000  08000540  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  08000540  00020024  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  00010540  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000035e  00000000  00000000  00010576  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000000e7  00000000  00000000  000108d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000058  00000000  00000000  000109c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000040  00000000  00000000  00010a18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00000f88  00000000  00000000  00010a58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000004da  00000000  00000000  000119e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00003dc8  00000000  00000000  00011eba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00015c82  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000009c  00000000  00000000  00015cd4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f0 <__do_global_dtors_aux>:
 80001f0:	b510      	push	{r4, lr}
 80001f2:	4c05      	ldr	r4, [pc, #20]	; (8000208 <__do_global_dtors_aux+0x18>)
 80001f4:	7823      	ldrb	r3, [r4, #0]
 80001f6:	b933      	cbnz	r3, 8000206 <__do_global_dtors_aux+0x16>
 80001f8:	4b04      	ldr	r3, [pc, #16]	; (800020c <__do_global_dtors_aux+0x1c>)
 80001fa:	b113      	cbz	r3, 8000202 <__do_global_dtors_aux+0x12>
 80001fc:	4804      	ldr	r0, [pc, #16]	; (8000210 <__do_global_dtors_aux+0x20>)
 80001fe:	e000      	b.n	8000202 <__do_global_dtors_aux+0x12>
 8000200:	bf00      	nop
 8000202:	2301      	movs	r3, #1
 8000204:	7023      	strb	r3, [r4, #0]
 8000206:	bd10      	pop	{r4, pc}
 8000208:	20000000 	.word	0x20000000
 800020c:	00000000 	.word	0x00000000
 8000210:	08000520 	.word	0x08000520

08000214 <frame_dummy>:
 8000214:	b508      	push	{r3, lr}
 8000216:	4b03      	ldr	r3, [pc, #12]	; (8000224 <frame_dummy+0x10>)
 8000218:	b11b      	cbz	r3, 8000222 <frame_dummy+0xe>
 800021a:	4903      	ldr	r1, [pc, #12]	; (8000228 <frame_dummy+0x14>)
 800021c:	4803      	ldr	r0, [pc, #12]	; (800022c <frame_dummy+0x18>)
 800021e:	e000      	b.n	8000222 <frame_dummy+0xe>
 8000220:	bf00      	nop
 8000222:	bd08      	pop	{r3, pc}
 8000224:	00000000 	.word	0x00000000
 8000228:	20000004 	.word	0x20000004
 800022c:	08000520 	.word	0x08000520

08000230 <TIM4_IRQHandler>:
#define HI 1
#define LO 0
static uint16_t edgefirst, pulsewidth;

void TIM4_IRQHandler(void)  // input mode PB6 AF2
{
 8000230:	b480      	push	{r7}
 8000232:	af00      	add	r7, sp, #0
   static unsigned int ic_pin=LO;
   TIM4->SR = 0;
 8000234:	4b12      	ldr	r3, [pc, #72]	; (8000280 <TIM4_IRQHandler+0x50>)
 8000236:	2200      	movs	r2, #0
 8000238:	611a      	str	r2, [r3, #16]

   if(ic_pin==LO)//HI has come
 800023a:	4b12      	ldr	r3, [pc, #72]	; (8000284 <TIM4_IRQHandler+0x54>)
 800023c:	681b      	ldr	r3, [r3, #0]
 800023e:	2b00      	cmp	r3, #0
 8000240:	d108      	bne.n	8000254 <TIM4_IRQHandler+0x24>
   {
	   ic_pin=HI;
 8000242:	4b10      	ldr	r3, [pc, #64]	; (8000284 <TIM4_IRQHandler+0x54>)
 8000244:	2201      	movs	r2, #1
 8000246:	601a      	str	r2, [r3, #0]
	   edgefirst = TIM4->CCR1;
 8000248:	4b0d      	ldr	r3, [pc, #52]	; (8000280 <TIM4_IRQHandler+0x50>)
 800024a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800024c:	b29a      	uxth	r2, r3
 800024e:	4b0e      	ldr	r3, [pc, #56]	; (8000288 <TIM4_IRQHandler+0x58>)
 8000250:	801a      	strh	r2, [r3, #0]
	   ic_pin=LO;
	   pulsewidth= TIM4->CCR1-edgefirst;
	   TIM15->CNT = TIM15->CCR1;

   }
}
 8000252:	e00f      	b.n	8000274 <TIM4_IRQHandler+0x44>
	   ic_pin=LO;
 8000254:	4b0b      	ldr	r3, [pc, #44]	; (8000284 <TIM4_IRQHandler+0x54>)
 8000256:	2200      	movs	r2, #0
 8000258:	601a      	str	r2, [r3, #0]
	   pulsewidth= TIM4->CCR1-edgefirst;
 800025a:	4b09      	ldr	r3, [pc, #36]	; (8000280 <TIM4_IRQHandler+0x50>)
 800025c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800025e:	b29a      	uxth	r2, r3
 8000260:	4b09      	ldr	r3, [pc, #36]	; (8000288 <TIM4_IRQHandler+0x58>)
 8000262:	881b      	ldrh	r3, [r3, #0]
 8000264:	1ad3      	subs	r3, r2, r3
 8000266:	b29a      	uxth	r2, r3
 8000268:	4b08      	ldr	r3, [pc, #32]	; (800028c <TIM4_IRQHandler+0x5c>)
 800026a:	801a      	strh	r2, [r3, #0]
	   TIM15->CNT = TIM15->CCR1;
 800026c:	4b08      	ldr	r3, [pc, #32]	; (8000290 <TIM4_IRQHandler+0x60>)
 800026e:	4a08      	ldr	r2, [pc, #32]	; (8000290 <TIM4_IRQHandler+0x60>)
 8000270:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000272:	6253      	str	r3, [r2, #36]	; 0x24
}
 8000274:	bf00      	nop
 8000276:	46bd      	mov	sp, r7
 8000278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop
 8000280:	40000800 	.word	0x40000800
 8000284:	20000020 	.word	0x20000020
 8000288:	2000001c 	.word	0x2000001c
 800028c:	2000001e 	.word	0x2000001e
 8000290:	40014000 	.word	0x40014000

08000294 <TIM15_IRQHandler>:


void TIM15_IRQHandler(void){ // output mode  PA2 AF14
 8000294:	b480      	push	{r7}
 8000296:	af00      	add	r7, sp, #0

	TIM15->SR =0;
 8000298:	4b07      	ldr	r3, [pc, #28]	; (80002b8 <TIM15_IRQHandler+0x24>)
 800029a:	2200      	movs	r2, #0
 800029c:	611a      	str	r2, [r3, #16]

	TIM15->CCR1 += pulsewidth;
 800029e:	4b06      	ldr	r3, [pc, #24]	; (80002b8 <TIM15_IRQHandler+0x24>)
 80002a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80002a2:	4a06      	ldr	r2, [pc, #24]	; (80002bc <TIM15_IRQHandler+0x28>)
 80002a4:	8812      	ldrh	r2, [r2, #0]
 80002a6:	4611      	mov	r1, r2
 80002a8:	4a03      	ldr	r2, [pc, #12]	; (80002b8 <TIM15_IRQHandler+0x24>)
 80002aa:	440b      	add	r3, r1
 80002ac:	6353      	str	r3, [r2, #52]	; 0x34

}
 80002ae:	bf00      	nop
 80002b0:	46bd      	mov	sp, r7
 80002b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002b6:	4770      	bx	lr
 80002b8:	40014000 	.word	0x40014000
 80002bc:	2000001e 	.word	0x2000001e

080002c0 <main>:

int main(void) {
 80002c0:	b480      	push	{r7}
 80002c2:	af00      	add	r7, sp, #0
	//Enable Clock for GPIO
	RCC_AHB2ENR |= (1 << 0); // gpioA clock active
 80002c4:	4b65      	ldr	r3, [pc, #404]	; (800045c <main+0x19c>)
 80002c6:	681b      	ldr	r3, [r3, #0]
 80002c8:	4a64      	ldr	r2, [pc, #400]	; (800045c <main+0x19c>)
 80002ca:	f043 0301 	orr.w	r3, r3, #1
 80002ce:	6013      	str	r3, [r2, #0]
	RCC_AHB2ENR |= (1 << 1); // gpioB clock active
 80002d0:	4b62      	ldr	r3, [pc, #392]	; (800045c <main+0x19c>)
 80002d2:	681b      	ldr	r3, [r3, #0]
 80002d4:	4a61      	ldr	r2, [pc, #388]	; (800045c <main+0x19c>)
 80002d6:	f043 0302 	orr.w	r3, r3, #2
 80002da:	6013      	str	r3, [r2, #0]
	RCC_AHB2ENR |= (1 <<2); // gpioc clock active
 80002dc:	4b5f      	ldr	r3, [pc, #380]	; (800045c <main+0x19c>)
 80002de:	681b      	ldr	r3, [r3, #0]
 80002e0:	4a5e      	ldr	r2, [pc, #376]	; (800045c <main+0x19c>)
 80002e2:	f043 0304 	orr.w	r3, r3, #4
 80002e6:	6013      	str	r3, [r2, #0]

	GPIOC->MODER &= ~(3<<14);
 80002e8:	4b5d      	ldr	r3, [pc, #372]	; (8000460 <main+0x1a0>)
 80002ea:	681b      	ldr	r3, [r3, #0]
 80002ec:	4a5c      	ldr	r2, [pc, #368]	; (8000460 <main+0x1a0>)
 80002ee:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80002f2:	6013      	str	r3, [r2, #0]
	GPIOC->MODER |= 1<<14;
 80002f4:	4b5a      	ldr	r3, [pc, #360]	; (8000460 <main+0x1a0>)
 80002f6:	681b      	ldr	r3, [r3, #0]
 80002f8:	4a59      	ldr	r2, [pc, #356]	; (8000460 <main+0x1a0>)
 80002fa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80002fe:	6013      	str	r3, [r2, #0]



	RCC_APB1ENR |= (1<<2);  // tim 4 clock active
 8000300:	4b58      	ldr	r3, [pc, #352]	; (8000464 <main+0x1a4>)
 8000302:	681b      	ldr	r3, [r3, #0]
 8000304:	4a57      	ldr	r2, [pc, #348]	; (8000464 <main+0x1a4>)
 8000306:	f043 0304 	orr.w	r3, r3, #4
 800030a:	6013      	str	r3, [r2, #0]
	RCC_APB2ENR |= (1<<16);	// tim 5 clock active
 800030c:	4b56      	ldr	r3, [pc, #344]	; (8000468 <main+0x1a8>)
 800030e:	681b      	ldr	r3, [r3, #0]
 8000310:	4a55      	ldr	r2, [pc, #340]	; (8000468 <main+0x1a8>)
 8000312:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000316:	6013      	str	r3, [r2, #0]



	//Configure Pin as General purpose output mode
	GPIOB->MODER |= (1 << 13); 	// PB6 ALTERNATE mode
 8000318:	4b54      	ldr	r3, [pc, #336]	; (800046c <main+0x1ac>)
 800031a:	681b      	ldr	r3, [r3, #0]
 800031c:	4a53      	ldr	r2, [pc, #332]	; (800046c <main+0x1ac>)
 800031e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000322:	6013      	str	r3, [r2, #0]
	GPIOB->MODER &= ~(1 << 12);
 8000324:	4b51      	ldr	r3, [pc, #324]	; (800046c <main+0x1ac>)
 8000326:	681b      	ldr	r3, [r3, #0]
 8000328:	4a50      	ldr	r2, [pc, #320]	; (800046c <main+0x1ac>)
 800032a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800032e:	6013      	str	r3, [r2, #0]

	GPIOA->MODER |= (1 << 5);	// pA2 ALTERNATE mode
 8000330:	4b4f      	ldr	r3, [pc, #316]	; (8000470 <main+0x1b0>)
 8000332:	681b      	ldr	r3, [r3, #0]
 8000334:	4a4e      	ldr	r2, [pc, #312]	; (8000470 <main+0x1b0>)
 8000336:	f043 0320 	orr.w	r3, r3, #32
 800033a:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &= ~(1 << 4);
 800033c:	4b4c      	ldr	r3, [pc, #304]	; (8000470 <main+0x1b0>)
 800033e:	681b      	ldr	r3, [r3, #0]
 8000340:	4a4b      	ldr	r2, [pc, #300]	; (8000470 <main+0x1b0>)
 8000342:	f023 0310 	bic.w	r3, r3, #16
 8000346:	6013      	str	r3, [r2, #0]

	GPIOB->AFRL &= ~(15 << 24);	    // PB6 AF2
 8000348:	4b48      	ldr	r3, [pc, #288]	; (800046c <main+0x1ac>)
 800034a:	6a1b      	ldr	r3, [r3, #32]
 800034c:	4a47      	ldr	r2, [pc, #284]	; (800046c <main+0x1ac>)
 800034e:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8000352:	6213      	str	r3, [r2, #32]
	GPIOB->AFRL |= (2<<24);
 8000354:	4b45      	ldr	r3, [pc, #276]	; (800046c <main+0x1ac>)
 8000356:	6a1b      	ldr	r3, [r3, #32]
 8000358:	4a44      	ldr	r2, [pc, #272]	; (800046c <main+0x1ac>)
 800035a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800035e:	6213      	str	r3, [r2, #32]
	GPIOA->AFRL &= ~(15 << 8);			// PA2 AF14
 8000360:	4b43      	ldr	r3, [pc, #268]	; (8000470 <main+0x1b0>)
 8000362:	6a1b      	ldr	r3, [r3, #32]
 8000364:	4a42      	ldr	r2, [pc, #264]	; (8000470 <main+0x1b0>)
 8000366:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800036a:	6213      	str	r3, [r2, #32]
	GPIOA->AFRL |= (14<<8);
 800036c:	4b40      	ldr	r3, [pc, #256]	; (8000470 <main+0x1b0>)
 800036e:	6a1b      	ldr	r3, [r3, #32]
 8000370:	4a3f      	ldr	r2, [pc, #252]	; (8000470 <main+0x1b0>)
 8000372:	f443 6360 	orr.w	r3, r3, #3584	; 0xe00
 8000376:	6213      	str	r3, [r2, #32]


	// tim4 initialize (red)
	NVIC_ISER1 |= (0x01<<15);	// Enable IRQ for Timer
 8000378:	4b3e      	ldr	r3, [pc, #248]	; (8000474 <main+0x1b4>)
 800037a:	681b      	ldr	r3, [r3, #0]
 800037c:	4a3d      	ldr	r2, [pc, #244]	; (8000474 <main+0x1b4>)
 800037e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000382:	6013      	str	r3, [r2, #0]
	TIM4->SR =0 ;
 8000384:	4b3c      	ldr	r3, [pc, #240]	; (8000478 <main+0x1b8>)
 8000386:	2200      	movs	r2, #0
 8000388:	611a      	str	r2, [r3, #16]
	TIM4->DIER |= (0x01<<1);  	// capture compare interrupt enable,,, Enable capture interrupt
 800038a:	4b3b      	ldr	r3, [pc, #236]	; (8000478 <main+0x1b8>)
 800038c:	68db      	ldr	r3, [r3, #12]
 800038e:	4a3a      	ldr	r2, [pc, #232]	; (8000478 <main+0x1b8>)
 8000390:	f043 0302 	orr.w	r3, r3, #2
 8000394:	60d3      	str	r3, [r2, #12]
	TIM4->CCMR1 &= ~3;			// select input capture
 8000396:	4b38      	ldr	r3, [pc, #224]	; (8000478 <main+0x1b8>)
 8000398:	699b      	ldr	r3, [r3, #24]
 800039a:	4a37      	ldr	r2, [pc, #220]	; (8000478 <main+0x1b8>)
 800039c:	f023 0303 	bic.w	r3, r3, #3
 80003a0:	6193      	str	r3, [r2, #24]
	TIM4->CCMR1 |= 1;			// Configure timer channel for input capture
 80003a2:	4b35      	ldr	r3, [pc, #212]	; (8000478 <main+0x1b8>)
 80003a4:	699b      	ldr	r3, [r3, #24]
 80003a6:	4a34      	ldr	r2, [pc, #208]	; (8000478 <main+0x1b8>)
 80003a8:	f043 0301 	orr.w	r3, r3, #1
 80003ac:	6193      	str	r3, [r2, #24]
	TIM4->CCER  |= 1;			// capture compare enable
 80003ae:	4b32      	ldr	r3, [pc, #200]	; (8000478 <main+0x1b8>)
 80003b0:	6a1b      	ldr	r3, [r3, #32]
 80003b2:	4a31      	ldr	r2, [pc, #196]	; (8000478 <main+0x1b8>)
 80003b4:	f043 0301 	orr.w	r3, r3, #1
 80003b8:	6213      	str	r3, [r2, #32]
	TIM4->CCER  |= 1<<1;		// listen both edges
 80003ba:	4b2f      	ldr	r3, [pc, #188]	; (8000478 <main+0x1b8>)
 80003bc:	6a1b      	ldr	r3, [r3, #32]
 80003be:	4a2e      	ldr	r2, [pc, #184]	; (8000478 <main+0x1b8>)
 80003c0:	f043 0302 	orr.w	r3, r3, #2
 80003c4:	6213      	str	r3, [r2, #32]
	TIM4->CCER  |= 1<<3;		// listen both edges
 80003c6:	4b2c      	ldr	r3, [pc, #176]	; (8000478 <main+0x1b8>)
 80003c8:	6a1b      	ldr	r3, [r3, #32]
 80003ca:	4a2b      	ldr	r2, [pc, #172]	; (8000478 <main+0x1b8>)
 80003cc:	f043 0308 	orr.w	r3, r3, #8
 80003d0:	6213      	str	r3, [r2, #32]
	TIM4->PSC = 7999; 		// Configure prescaler to increase the CNT register for every 2 millisecond. (PSC)
 80003d2:	4b29      	ldr	r3, [pc, #164]	; (8000478 <main+0x1b8>)
 80003d4:	f641 723f 	movw	r2, #7999	; 0x1f3f
 80003d8:	629a      	str	r2, [r3, #40]	; 0x28
	TIM4->CR1 |= 0x01;		// timer counterını başlat
 80003da:	4b27      	ldr	r3, [pc, #156]	; (8000478 <main+0x1b8>)
 80003dc:	681b      	ldr	r3, [r3, #0]
 80003de:	4a26      	ldr	r2, [pc, #152]	; (8000478 <main+0x1b8>)
 80003e0:	f043 0301 	orr.w	r3, r3, #1
 80003e4:	6013      	str	r3, [r2, #0]


	// tim15 initialize (green)
	NVIC_ISER2 |= (0x01<<5); // Enable IRQ for Timer
 80003e6:	4b25      	ldr	r3, [pc, #148]	; (800047c <main+0x1bc>)
 80003e8:	681b      	ldr	r3, [r3, #0]
 80003ea:	4a24      	ldr	r2, [pc, #144]	; (800047c <main+0x1bc>)
 80003ec:	f043 0320 	orr.w	r3, r3, #32
 80003f0:	6013      	str	r3, [r2, #0]
	TIM15->SR = 0;
 80003f2:	4b23      	ldr	r3, [pc, #140]	; (8000480 <main+0x1c0>)
 80003f4:	2200      	movs	r2, #0
 80003f6:	611a      	str	r2, [r3, #16]
	TIM15->DIER |= (0x01<<1);  	// capture compare interrupt enable,, Enable output compare interrupt
 80003f8:	4b21      	ldr	r3, [pc, #132]	; (8000480 <main+0x1c0>)
 80003fa:	68db      	ldr	r3, [r3, #12]
 80003fc:	4a20      	ldr	r2, [pc, #128]	; (8000480 <main+0x1c0>)
 80003fe:	f043 0302 	orr.w	r3, r3, #2
 8000402:	60d3      	str	r3, [r2, #12]
	TIM15->BDTR |= 1<<15;		// main output enable
 8000404:	4b1e      	ldr	r3, [pc, #120]	; (8000480 <main+0x1c0>)
 8000406:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000408:	4a1d      	ldr	r2, [pc, #116]	; (8000480 <main+0x1c0>)
 800040a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800040e:	6453      	str	r3, [r2, #68]	; 0x44
	TIM15->CCMR1 &= ~3; 		// select output compare,, Configure timer channel for output compare
 8000410:	4b1b      	ldr	r3, [pc, #108]	; (8000480 <main+0x1c0>)
 8000412:	699b      	ldr	r3, [r3, #24]
 8000414:	4a1a      	ldr	r2, [pc, #104]	; (8000480 <main+0x1c0>)
 8000416:	f023 0303 	bic.w	r3, r3, #3
 800041a:	6193      	str	r3, [r2, #24]
	TIM15->CCMR1 |= 3<<4;		// output toggle,, Configure timer channel for toggle
 800041c:	4b18      	ldr	r3, [pc, #96]	; (8000480 <main+0x1c0>)
 800041e:	699b      	ldr	r3, [r3, #24]
 8000420:	4a17      	ldr	r2, [pc, #92]	; (8000480 <main+0x1c0>)
 8000422:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8000426:	6193      	str	r3, [r2, #24]
	TIM15->CCER  |= 1;			// capture compare enable
 8000428:	4b15      	ldr	r3, [pc, #84]	; (8000480 <main+0x1c0>)
 800042a:	6a1b      	ldr	r3, [r3, #32]
 800042c:	4a14      	ldr	r2, [pc, #80]	; (8000480 <main+0x1c0>)
 800042e:	f043 0301 	orr.w	r3, r3, #1
 8000432:	6213      	str	r3, [r2, #32]
	TIM15->PSC = 19999; 		// Configure prescaler to increase the CNT register for every 5 millisecond
 8000434:	4b12      	ldr	r3, [pc, #72]	; (8000480 <main+0x1c0>)
 8000436:	f644 621f 	movw	r2, #19999	; 0x4e1f
 800043a:	629a      	str	r2, [r3, #40]	; 0x28
	TIM15->CR1 |= 0x01;		// timer counterını başlat
 800043c:	4b10      	ldr	r3, [pc, #64]	; (8000480 <main+0x1c0>)
 800043e:	681b      	ldr	r3, [r3, #0]
 8000440:	4a0f      	ldr	r2, [pc, #60]	; (8000480 <main+0x1c0>)
 8000442:	f043 0301 	orr.w	r3, r3, #1
 8000446:	6013      	str	r3, [r2, #0]





	__asm volatile( //enable all interrupts that are configured
 8000448:	f04f 0000 	mov.w	r0, #0
 800044c:	f380 8810 	msr	PRIMASK, r0
 8000450:	2300      	movs	r3, #0
	 "mov r0, #0 \n\t"
	 "msr primask, r0 \n\t"
	 );

}
 8000452:	4618      	mov	r0, r3
 8000454:	46bd      	mov	sp, r7
 8000456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800045a:	4770      	bx	lr
 800045c:	4002104c 	.word	0x4002104c
 8000460:	42020800 	.word	0x42020800
 8000464:	40021058 	.word	0x40021058
 8000468:	40021060 	.word	0x40021060
 800046c:	42020400 	.word	0x42020400
 8000470:	42020000 	.word	0x42020000
 8000474:	e000e104 	.word	0xe000e104
 8000478:	40000800 	.word	0x40000800
 800047c:	e000e108 	.word	0xe000e108
 8000480:	40014000 	.word	0x40014000

08000484 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000484:	480d      	ldr	r0, [pc, #52]	; (80004bc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000486:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000488:	e000      	b.n	800048c <Reset_Handler+0x8>
 800048a:	bf00      	nop

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800048c:	480c      	ldr	r0, [pc, #48]	; (80004c0 <LoopForever+0x6>)
  ldr r1, =_edata
 800048e:	490d      	ldr	r1, [pc, #52]	; (80004c4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000490:	4a0d      	ldr	r2, [pc, #52]	; (80004c8 <LoopForever+0xe>)
  movs r3, #0
 8000492:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000494:	e002      	b.n	800049c <LoopCopyDataInit>

08000496 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000496:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000498:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800049a:	3304      	adds	r3, #4

0800049c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800049c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800049e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80004a0:	d3f9      	bcc.n	8000496 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80004a2:	4a0a      	ldr	r2, [pc, #40]	; (80004cc <LoopForever+0x12>)
  ldr r4, =_ebss
 80004a4:	4c0a      	ldr	r4, [pc, #40]	; (80004d0 <LoopForever+0x16>)
  movs r3, #0
 80004a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80004a8:	e001      	b.n	80004ae <LoopFillZerobss>

080004aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80004aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80004ac:	3204      	adds	r2, #4

080004ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80004ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80004b0:	d3fb      	bcc.n	80004aa <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80004b2:	f000 f811 	bl	80004d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80004b6:	f7ff ff03 	bl	80002c0 <main>

080004ba <LoopForever>:

LoopForever:
    b LoopForever
 80004ba:	e7fe      	b.n	80004ba <LoopForever>
  ldr   r0, =_estack
 80004bc:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80004c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80004c4:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80004c8:	08000540 	.word	0x08000540
  ldr r2, =_sbss
 80004cc:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80004d0:	20000024 	.word	0x20000024

080004d4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80004d4:	e7fe      	b.n	80004d4 <ADC1_2_IRQHandler>
	...

080004d8 <__libc_init_array>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	4d0d      	ldr	r5, [pc, #52]	; (8000510 <__libc_init_array+0x38>)
 80004dc:	2600      	movs	r6, #0
 80004de:	4c0d      	ldr	r4, [pc, #52]	; (8000514 <__libc_init_array+0x3c>)
 80004e0:	1b64      	subs	r4, r4, r5
 80004e2:	10a4      	asrs	r4, r4, #2
 80004e4:	42a6      	cmp	r6, r4
 80004e6:	d109      	bne.n	80004fc <__libc_init_array+0x24>
 80004e8:	4d0b      	ldr	r5, [pc, #44]	; (8000518 <__libc_init_array+0x40>)
 80004ea:	2600      	movs	r6, #0
 80004ec:	4c0b      	ldr	r4, [pc, #44]	; (800051c <__libc_init_array+0x44>)
 80004ee:	f000 f817 	bl	8000520 <_init>
 80004f2:	1b64      	subs	r4, r4, r5
 80004f4:	10a4      	asrs	r4, r4, #2
 80004f6:	42a6      	cmp	r6, r4
 80004f8:	d105      	bne.n	8000506 <__libc_init_array+0x2e>
 80004fa:	bd70      	pop	{r4, r5, r6, pc}
 80004fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8000500:	3601      	adds	r6, #1
 8000502:	4798      	blx	r3
 8000504:	e7ee      	b.n	80004e4 <__libc_init_array+0xc>
 8000506:	f855 3b04 	ldr.w	r3, [r5], #4
 800050a:	3601      	adds	r6, #1
 800050c:	4798      	blx	r3
 800050e:	e7f2      	b.n	80004f6 <__libc_init_array+0x1e>
 8000510:	08000538 	.word	0x08000538
 8000514:	08000538 	.word	0x08000538
 8000518:	08000538 	.word	0x08000538
 800051c:	0800053c 	.word	0x0800053c

08000520 <_init>:
 8000520:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000522:	bf00      	nop
 8000524:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000526:	bc08      	pop	{r3}
 8000528:	469e      	mov	lr, r3
 800052a:	4770      	bx	lr

0800052c <_fini>:
 800052c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800052e:	bf00      	nop
 8000530:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000532:	bc08      	pop	{r3}
 8000534:	469e      	mov	lr, r3
 8000536:	4770      	bx	lr
