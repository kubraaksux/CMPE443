
PRELAB_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000001e4  080001f0  080001f0  000101f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080003d4  080003d4  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080003d4  080003d4  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  080003d4  080003d4  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  080003d4  080003d4  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080003d4  080003d4  000103d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080003d8  080003d8  000103d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  080003dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000004  080003e0  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  080003e0  00020024  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000103  00000000  00000000  0002003a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000009e  00000000  00000000  0002013d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000048  00000000  00000000  000201e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000030  00000000  00000000  00020228  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00000f3a  00000000  00000000  00020258  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000488  00000000  00000000  00021192  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00003b2f  00000000  00000000  0002161a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00025149  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000058  00000000  00000000  0002519c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f0 <__do_global_dtors_aux>:
 80001f0:	b510      	push	{r4, lr}
 80001f2:	4c05      	ldr	r4, [pc, #20]	; (8000208 <__do_global_dtors_aux+0x18>)
 80001f4:	7823      	ldrb	r3, [r4, #0]
 80001f6:	b933      	cbnz	r3, 8000206 <__do_global_dtors_aux+0x16>
 80001f8:	4b04      	ldr	r3, [pc, #16]	; (800020c <__do_global_dtors_aux+0x1c>)
 80001fa:	b113      	cbz	r3, 8000202 <__do_global_dtors_aux+0x12>
 80001fc:	4804      	ldr	r0, [pc, #16]	; (8000210 <__do_global_dtors_aux+0x20>)
 80001fe:	e000      	b.n	8000202 <__do_global_dtors_aux+0x12>
 8000200:	bf00      	nop
 8000202:	2301      	movs	r3, #1
 8000204:	7023      	strb	r3, [r4, #0]
 8000206:	bd10      	pop	{r4, pc}
 8000208:	20000004 	.word	0x20000004
 800020c:	00000000 	.word	0x00000000
 8000210:	080003bc 	.word	0x080003bc

08000214 <frame_dummy>:
 8000214:	b508      	push	{r3, lr}
 8000216:	4b03      	ldr	r3, [pc, #12]	; (8000224 <frame_dummy+0x10>)
 8000218:	b11b      	cbz	r3, 8000222 <frame_dummy+0xe>
 800021a:	4903      	ldr	r1, [pc, #12]	; (8000228 <frame_dummy+0x14>)
 800021c:	4803      	ldr	r0, [pc, #12]	; (800022c <frame_dummy+0x18>)
 800021e:	e000      	b.n	8000222 <frame_dummy+0xe>
 8000220:	bf00      	nop
 8000222:	bd08      	pop	{r3, pc}
 8000224:	00000000 	.word	0x00000000
 8000228:	20000008 	.word	0x20000008
 800022c:	080003bc 	.word	0x080003bc

08000230 <main>:
#include <stdint.h>

uint32_t wait_millisecond = 1000;
uint32_t wait_counter = 0;

int main(void) {
 8000230:	b480      	push	{r7}
 8000232:	b083      	sub	sp, #12
 8000234:	af00      	add	r7, sp, #0
	*((uint32_t*)(0x40021000 + 0x4C)) |= 0x01 << 1;
 8000236:	4b32      	ldr	r3, [pc, #200]	; (8000300 <main+0xd0>)
 8000238:	681b      	ldr	r3, [r3, #0]
 800023a:	4a31      	ldr	r2, [pc, #196]	; (8000300 <main+0xd0>)
 800023c:	f043 0302 	orr.w	r3, r3, #2
 8000240:	6013      	str	r3, [r2, #0]

	*((uint32_t*)(0x42020400 + 0x08)) &= ~(0x03 << (7 * 2));
 8000242:	4b30      	ldr	r3, [pc, #192]	; (8000304 <main+0xd4>)
 8000244:	681b      	ldr	r3, [r3, #0]
 8000246:	4a2f      	ldr	r2, [pc, #188]	; (8000304 <main+0xd4>)
 8000248:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800024c:	6013      	str	r3, [r2, #0]
	*((uint32_t*)(0x42020400 + 0x08)) |= (0x01 << (7 * 2));
 800024e:	4b2d      	ldr	r3, [pc, #180]	; (8000304 <main+0xd4>)
 8000250:	681b      	ldr	r3, [r3, #0]
 8000252:	4a2c      	ldr	r2, [pc, #176]	; (8000304 <main+0xd4>)
 8000254:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000258:	6013      	str	r3, [r2, #0]

	*((uint32_t*)(0x42020400 + 0x04)) &= ~(0x01 << 7);
 800025a:	4b2b      	ldr	r3, [pc, #172]	; (8000308 <main+0xd8>)
 800025c:	681b      	ldr	r3, [r3, #0]
 800025e:	4a2a      	ldr	r2, [pc, #168]	; (8000308 <main+0xd8>)
 8000260:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000264:	6013      	str	r3, [r2, #0]

	*((uint32_t*)(0x42020400 + 0x0C)) &= ~(0x03 << (7 * 2));
 8000266:	4b29      	ldr	r3, [pc, #164]	; (800030c <main+0xdc>)
 8000268:	681b      	ldr	r3, [r3, #0]
 800026a:	4a28      	ldr	r2, [pc, #160]	; (800030c <main+0xdc>)
 800026c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000270:	6013      	str	r3, [r2, #0]

	*((uint32_t*)(0x42020400 + 0x00)) &= ~(0x03 << (7 * 2));
 8000272:	4b27      	ldr	r3, [pc, #156]	; (8000310 <main+0xe0>)
 8000274:	681b      	ldr	r3, [r3, #0]
 8000276:	4a26      	ldr	r2, [pc, #152]	; (8000310 <main+0xe0>)
 8000278:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800027c:	6013      	str	r3, [r2, #0]
	*((uint32_t*)(0x42020400 + 0x00)) |= (0x01 << (7 * 2));
 800027e:	4b24      	ldr	r3, [pc, #144]	; (8000310 <main+0xe0>)
 8000280:	681b      	ldr	r3, [r3, #0]
 8000282:	4a23      	ldr	r2, [pc, #140]	; (8000310 <main+0xe0>)
 8000284:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000288:	6013      	str	r3, [r2, #0]

	*((uint32_t*)(0x42020400 + 0x18)) |= (0x01 << 7);
 800028a:	4b22      	ldr	r3, [pc, #136]	; (8000314 <main+0xe4>)
 800028c:	681b      	ldr	r3, [r3, #0]
 800028e:	4a21      	ldr	r2, [pc, #132]	; (8000314 <main+0xe4>)
 8000290:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000294:	6013      	str	r3, [r2, #0]

	while(1) {
		int volatile index;

		*((uint32_t*)(0x42020400 + 0x18)) |= (0x01 << 7);
 8000296:	4b1f      	ldr	r3, [pc, #124]	; (8000314 <main+0xe4>)
 8000298:	681b      	ldr	r3, [r3, #0]
 800029a:	4a1e      	ldr	r2, [pc, #120]	; (8000314 <main+0xe4>)
 800029c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80002a0:	6013      	str	r3, [r2, #0]

		for(index=0;index<wait_millisecond*333 ;index++);
 80002a2:	2300      	movs	r3, #0
 80002a4:	607b      	str	r3, [r7, #4]
 80002a6:	e002      	b.n	80002ae <main+0x7e>
 80002a8:	687b      	ldr	r3, [r7, #4]
 80002aa:	3301      	adds	r3, #1
 80002ac:	607b      	str	r3, [r7, #4]
 80002ae:	4b1a      	ldr	r3, [pc, #104]	; (8000318 <main+0xe8>)
 80002b0:	681b      	ldr	r3, [r3, #0]
 80002b2:	f240 124d 	movw	r2, #333	; 0x14d
 80002b6:	fb02 f303 	mul.w	r3, r2, r3
 80002ba:	687a      	ldr	r2, [r7, #4]
 80002bc:	4293      	cmp	r3, r2
 80002be:	d8f3      	bhi.n	80002a8 <main+0x78>
		wait_counter = wait_counter + 1;
 80002c0:	4b16      	ldr	r3, [pc, #88]	; (800031c <main+0xec>)
 80002c2:	681b      	ldr	r3, [r3, #0]
 80002c4:	3301      	adds	r3, #1
 80002c6:	4a15      	ldr	r2, [pc, #84]	; (800031c <main+0xec>)
 80002c8:	6013      	str	r3, [r2, #0]

		*((uint32_t*)(0x42020400 + 0x18)) |= ((0x01 << 7) << 16);
 80002ca:	4b12      	ldr	r3, [pc, #72]	; (8000314 <main+0xe4>)
 80002cc:	681b      	ldr	r3, [r3, #0]
 80002ce:	4a11      	ldr	r2, [pc, #68]	; (8000314 <main+0xe4>)
 80002d0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80002d4:	6013      	str	r3, [r2, #0]

		for(index=0;index<wait_millisecond*333;index++);
 80002d6:	2300      	movs	r3, #0
 80002d8:	607b      	str	r3, [r7, #4]
 80002da:	e002      	b.n	80002e2 <main+0xb2>
 80002dc:	687b      	ldr	r3, [r7, #4]
 80002de:	3301      	adds	r3, #1
 80002e0:	607b      	str	r3, [r7, #4]
 80002e2:	4b0d      	ldr	r3, [pc, #52]	; (8000318 <main+0xe8>)
 80002e4:	681b      	ldr	r3, [r3, #0]
 80002e6:	f240 124d 	movw	r2, #333	; 0x14d
 80002ea:	fb02 f303 	mul.w	r3, r2, r3
 80002ee:	687a      	ldr	r2, [r7, #4]
 80002f0:	4293      	cmp	r3, r2
 80002f2:	d8f3      	bhi.n	80002dc <main+0xac>
		wait_counter = wait_counter + 1;
 80002f4:	4b09      	ldr	r3, [pc, #36]	; (800031c <main+0xec>)
 80002f6:	681b      	ldr	r3, [r3, #0]
 80002f8:	3301      	adds	r3, #1
 80002fa:	4a08      	ldr	r2, [pc, #32]	; (800031c <main+0xec>)
 80002fc:	6013      	str	r3, [r2, #0]
	while(1) {
 80002fe:	e7ca      	b.n	8000296 <main+0x66>
 8000300:	4002104c 	.word	0x4002104c
 8000304:	42020408 	.word	0x42020408
 8000308:	42020404 	.word	0x42020404
 800030c:	4202040c 	.word	0x4202040c
 8000310:	42020400 	.word	0x42020400
 8000314:	42020418 	.word	0x42020418
 8000318:	20000000 	.word	0x20000000
 800031c:	20000020 	.word	0x20000020

08000320 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000320:	480d      	ldr	r0, [pc, #52]	; (8000358 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000322:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000324:	e000      	b.n	8000328 <Reset_Handler+0x8>
 8000326:	bf00      	nop

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000328:	480c      	ldr	r0, [pc, #48]	; (800035c <LoopForever+0x6>)
  ldr r1, =_edata
 800032a:	490d      	ldr	r1, [pc, #52]	; (8000360 <LoopForever+0xa>)
  ldr r2, =_sidata
 800032c:	4a0d      	ldr	r2, [pc, #52]	; (8000364 <LoopForever+0xe>)
  movs r3, #0
 800032e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000330:	e002      	b.n	8000338 <LoopCopyDataInit>

08000332 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000332:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000334:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000336:	3304      	adds	r3, #4

08000338 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000338:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800033a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800033c:	d3f9      	bcc.n	8000332 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800033e:	4a0a      	ldr	r2, [pc, #40]	; (8000368 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000340:	4c0a      	ldr	r4, [pc, #40]	; (800036c <LoopForever+0x16>)
  movs r3, #0
 8000342:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000344:	e001      	b.n	800034a <LoopFillZerobss>

08000346 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000346:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000348:	3204      	adds	r2, #4

0800034a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800034a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800034c:	d3fb      	bcc.n	8000346 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800034e:	f000 f811 	bl	8000374 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000352:	f7ff ff6d 	bl	8000230 <main>

08000356 <LoopForever>:

LoopForever:
    b LoopForever
 8000356:	e7fe      	b.n	8000356 <LoopForever>
  ldr   r0, =_estack
 8000358:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 800035c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000360:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000364:	080003dc 	.word	0x080003dc
  ldr r2, =_sbss
 8000368:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 800036c:	20000024 	.word	0x20000024

08000370 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000370:	e7fe      	b.n	8000370 <ADC1_2_IRQHandler>
	...

08000374 <__libc_init_array>:
 8000374:	b570      	push	{r4, r5, r6, lr}
 8000376:	4d0d      	ldr	r5, [pc, #52]	; (80003ac <__libc_init_array+0x38>)
 8000378:	2600      	movs	r6, #0
 800037a:	4c0d      	ldr	r4, [pc, #52]	; (80003b0 <__libc_init_array+0x3c>)
 800037c:	1b64      	subs	r4, r4, r5
 800037e:	10a4      	asrs	r4, r4, #2
 8000380:	42a6      	cmp	r6, r4
 8000382:	d109      	bne.n	8000398 <__libc_init_array+0x24>
 8000384:	4d0b      	ldr	r5, [pc, #44]	; (80003b4 <__libc_init_array+0x40>)
 8000386:	2600      	movs	r6, #0
 8000388:	4c0b      	ldr	r4, [pc, #44]	; (80003b8 <__libc_init_array+0x44>)
 800038a:	f000 f817 	bl	80003bc <_init>
 800038e:	1b64      	subs	r4, r4, r5
 8000390:	10a4      	asrs	r4, r4, #2
 8000392:	42a6      	cmp	r6, r4
 8000394:	d105      	bne.n	80003a2 <__libc_init_array+0x2e>
 8000396:	bd70      	pop	{r4, r5, r6, pc}
 8000398:	f855 3b04 	ldr.w	r3, [r5], #4
 800039c:	3601      	adds	r6, #1
 800039e:	4798      	blx	r3
 80003a0:	e7ee      	b.n	8000380 <__libc_init_array+0xc>
 80003a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80003a6:	3601      	adds	r6, #1
 80003a8:	4798      	blx	r3
 80003aa:	e7f2      	b.n	8000392 <__libc_init_array+0x1e>
 80003ac:	080003d4 	.word	0x080003d4
 80003b0:	080003d4 	.word	0x080003d4
 80003b4:	080003d4 	.word	0x080003d4
 80003b8:	080003d8 	.word	0x080003d8

080003bc <_init>:
 80003bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003be:	bf00      	nop
 80003c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003c2:	bc08      	pop	{r3}
 80003c4:	469e      	mov	lr, r3
 80003c6:	4770      	bx	lr

080003c8 <_fini>:
 80003c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003ca:	bf00      	nop
 80003cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003ce:	bc08      	pop	{r3}
 80003d0:	469e      	mov	lr, r3
 80003d2:	4770      	bx	lr
